<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>K.L.</title>
  <icon>https://k-l-lambda.github.io/profile.png</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://k-l-lambda.github.io/"/>
  <updated>2022-08-19T08:51:12.991Z</updated>
  <id>https://k-l-lambda.github.io/</id>
  
  <author>
    <name>K.L.</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[xkcd] “复”元音</title>
    <link href="https://k-l-lambda.github.io/2022/08/13/xkcd-ComplexVowels/"/>
    <id>https://k-l-lambda.github.io/2022/08/13/xkcd-ComplexVowels/</id>
    <published>2022-08-13T15:55:33.000Z</published>
    <updated>2022-08-19T08:51:12.991Z</updated>
    
    <content type="html"><![CDATA[<figure><picture><img src="/images/xkcd-complex_vowels.png" class="figure" width="270" alt="xkcd 2657"></picture><figcaption><a href="https://xkcd.com/2657/" target="_blank" rel="noopener">xkcd/2657</a></figcaption></figure><blockquote><p>语言学提示：<br/>沿虚轴扩展国际音标元音平面，由此生成&quot;<strong>复</strong>元音&quot;。<br/>这天煞的声音已超越人类心智的理解能力！</p></blockquote><p>国际音标中的元音可以按发音位置(前-后)和口型(闭-开)两个维度分类, 即所谓’<a href="https://en.wikipedia.org/wiki/Vowel_diagram" target="_blank" rel="noopener">VOWEL PLANE</a>’.如下图:</p><img src="/images/English_vowel_chart.svg.png" class="figure" width="240" alt="vowel plane"><p>作者借用了数学上的<a href="https://zh.m.wikipedia.org/zh-hans/%E8%A7%A3%E6%9E%90%E5%BB%B6%E6%8B%93" target="_blank" rel="noopener">解析延拓</a>概念,设想在元音平面基础上再加上虚轴, 即得到了&quot;复元音&quot;.这里的&quot;复&quot;是复数的复. (双元音的英文是’diphthong’.)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure&gt;
	&lt;picture&gt;
		&lt;img src=&quot;/images/xkcd-complex_vowels.png&quot; class=&quot;figure&quot; width=&quot;270&quot; alt=&quot;xkcd 2657&quot;&gt;
	&lt;/picture&gt;
	&lt;figcaption&gt;&lt;a hre
      
    
    </summary>
    
    
    
      <category term="中文" scheme="https://k-l-lambda.github.io/tags/%E4%B8%AD%E6%96%87/"/>
    
      <category term="translation" scheme="https://k-l-lambda.github.io/tags/translation/"/>
    
      <category term="xkcd" scheme="https://k-l-lambda.github.io/tags/xkcd/"/>
    
  </entry>
  
  <entry>
    <title>[xkcd] 视角直径拐点</title>
    <link href="https://k-l-lambda.github.io/2022/08/13/xkcd-AngularDiameterTurnaround/"/>
    <id>https://k-l-lambda.github.io/2022/08/13/xkcd-AngularDiameterTurnaround/</id>
    <published>2022-08-13T14:46:11.000Z</published>
    <updated>2022-08-19T08:51:12.991Z</updated>
    
    <content type="html"><![CDATA[<figure><picture><img src="/images/xkcd-angular_diameter_turnaround.png" class="figure" width="740" alt="xkcd 2622"></picture><figcaption><a href="https://xkcd.com/2622/" target="_blank" rel="noopener">xkcd/2622</a></figcaption></figure><blockquote><p><strong>视角直径拐点</strong><br/><em>(图中用手机代替星系，亮度和红移已调整到可见范围)</em><br/><em>近大远小，离我们越远的物体看起来越小，但非常非常远的物体看起来反而会变大！</em><br/><em>因为当它们的光线刚刚发射出来的时候宇宙还很小，当时它们距离我们（现在的空间位置）更近。</em><br/></p></blockquote><p>由于光速有限, 眺望远方其实也是眺望过去(字面意义上的).所以整个夜空其实是展示给我们的一部宇宙历史, 有意思的是这历史的最外层其实是宇宙早期的显微结构(参见<a href="https://wikizh.click/wiki/Decoupling_(cosmology)" target="_blank" rel="noopener">解耦</a>).设想, 从地球向外, 把夜空(过去光锥)划分成一圈圈包围我们的天球球层, 在地球附近这些球层半径不断变大, 最后又变得很小, 那么中间一定会经历一个拐点.我有点好奇这拐点具体发生在什么时间, 从这篇xkcd的漫画图中来看, 大概是发生在<a href="https://zh.m.wikipedia.org/zh-hans/%E5%86%8D%E9%9B%BB%E9%9B%A2" target="_blank" rel="noopener">再电离</a>事件之前的.</p><hr><p>好久没有更新博客了, 去年至今其实有一些酝酿中的想法, 没时间整理成paper, 只能再往后推了.最近打算先翻译一些有趣的xkcd漫画作品.</p><p>非常怀念过去在科学松鼠会上看<a href="http://www.songshuehu.net/ent.htm" target="_blank" rel="noopener">Ent</a><sup><a href="https://www.163.com/dy/article/GBP09SFP055218MP.html" target="_blank" rel="noopener">*</a></sup>翻译xkcd等各种科学漫画的时光.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure&gt;
	&lt;picture&gt;
		&lt;img src=&quot;/images/xkcd-angular_diameter_turnaround.png&quot; class=&quot;figure&quot; width=&quot;740&quot; alt=&quot;xkcd 2622&quot;&gt;
	&lt;/picture&gt;
	&lt;figc
      
    
    </summary>
    
    
    
      <category term="中文" scheme="https://k-l-lambda.github.io/tags/%E4%B8%AD%E6%96%87/"/>
    
      <category term="translation" scheme="https://k-l-lambda.github.io/tags/translation/"/>
    
      <category term="xkcd" scheme="https://k-l-lambda.github.io/tags/xkcd/"/>
    
  </entry>
  
  <entry>
    <title>[转载] 梁文道：聊聊知识是什么</title>
    <link href="https://k-l-lambda.github.io/2021/06/24/what-is-knowledge/"/>
    <id>https://k-l-lambda.github.io/2021/06/24/what-is-knowledge/</id>
    <published>2021-06-24T21:50:26.000Z</published>
    <updated>2022-08-19T08:51:12.991Z</updated>
    
    <content type="html"><![CDATA[<p><audio src="/images/liang-what-is-knowledge.mp3" style="width: 100%; max-width: 800px" controls></audio></p><p>来自：<a href="https://www.youtube.com/watch?v=8BgV5Z8rT8Y&amp;list=FLWjEpsPk3N_BX9YPHNtB5Ow&amp;index=1" target="_blank" rel="noopener"><em>YouTube</em> 梁文道：聊聊知识是什么</a><br/>上一集：<a href="https://www.youtube.com/watch?v=nH3YrhDEDdQ&amp;list=FLWjEpsPk3N_BX9YPHNtB5Ow&amp;index=2" target="_blank" rel="noopener"><em>YouTube</em> 梁文道：聊聊反智主义是如何兴起的</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;audio src=&quot;/images/liang-what-is-knowledge.mp3&quot; style=&quot;width: 100%; max-width: 800px&quot; controls&gt;&lt;/audio&gt;&lt;/p&gt;
&lt;p&gt;来自：&lt;a href=&quot;https://www.y
      
    
    </summary>
    
    
    
      <category term="中文" scheme="https://k-l-lambda.github.io/tags/%E4%B8%AD%E6%96%87/"/>
    
      <category term="belief" scheme="https://k-l-lambda.github.io/tags/belief/"/>
    
  </entry>
  
  <entry>
    <title>How to represent a Rubik&#39;s cube state in a calculable form?</title>
    <link href="https://k-l-lambda.github.io/2020/12/14/rubik-cube-notation/"/>
    <id>https://k-l-lambda.github.io/2020/12/14/rubik-cube-notation/</id>
    <published>2020-12-14T21:37:33.000Z</published>
    <updated>2022-08-19T08:51:12.991Z</updated>
    
    <content type="html"><![CDATA[<figure><picture><img src="/images/cube3-matrix-tetris.svg" alt="a cube3 matrix samle #LKONLKONLOKNLKONKLNOGCAAFD" /></picture><figcaption>Guess what this is? <a target="_blank" href="/klstudio/#/documents/dynamic-labeled-cube3#LKONLKONLOKNLKONKLNOGCAAFD">See the answer here.</a></figcaption></figure><p>To describe a chess game state, you don’t need to mention every chess piece’s details.Essentially, a chess piece is just a symbol. Ignoring appearance detail helps us to grab the game gist.Till now, a popular way to represent a Rubik’s cube state is the facelets expanding graph, like this:</p><p><img src="/images/cube3-expand-graph-original.png" alt="a cube3 expanding graph sample"></p><p>By this way, you can’t tell which facelets are adjacent each other straightway, also it’s hard to imagine what the cube will change into after a twist applied.That because it comes from the appearance, but not the essential.Furtherly, as <a href="/2020/02/05/cube-algebra/#Motivation">my preivous blog</a> wrote, Rubik’s Cube solver programs who construct cube state from facelet color is clumsy.Rubik’s Cube is a game about cubes’s <strong>rotation</strong> and <strong>permutation</strong> (but not painting color), <strong>matrix</strong> is the most proper math tool here.</p><p>However, the fact revealed by this method is not easy to see through, and that is just what I will tell you in this blog.</p><a id="more"></a><h2 id="Cube-orientation-representation">Cube orientation representation</h2><p>Let’s begin with a simple case, the <em>1-order Rubik’s cube</em>, i.e. a single cube.How to restore a rotated cube to the original orientation, in a shorttest way?That’s just <a href="/2020/02/05/cube-algebra/">Cube Rotation Algebra</a>’s topic.Now let’s symbolize them in a new way.</p><p>Recently, I found 2 lucky things, this is the first:</p><figure><span class="max600"><span class="fixed-ratio" style="width: 100%; padding-top: 100%"><iframe src="/klstudio/embed.html#/documents/mesh-viewer-demo:quarter-array-4x6-greek"></iframe></span></span><figcaption>Representing 24 orthogonal orientations by lowercase Greek letters.</figcaption></figure><p>You will be familiar with this figure if you have read <a href="/2020/02/05/cube-algebra/">Cube Rotation Algebra</a>.The lucky is that we have exact 24 modern Greek letters in total coincidentally.</p><p>I have explained cube rotation algebra in <a href="/2020/02/05/cube-algebra/">the preivous blog</a> in details,now I just show you what the relationship looks like between Greek letters and colored cubes.</p><figure><span style="display: inline-block; width: 400px;"><span class="fixed-ratio" style="width: 100%; padding-top: 100%"><iframe src="/klstudio/embed.html#/documents/flipping-cube-demo"></iframe></span></span></figure><p>Mathematically, they can be defined in quaternions:</p><p>$$\begin{aligned}&amp; \alpha = 1 \\&amp; \beta = i \\&amp; \gamma = j \\&amp; \delta = k \\&amp; \epsilon = \sqrt{i} = \frac{\sqrt{2}}{2} + \frac{\sqrt{2}}{2} i \\&amp; … \\&amp; \omega = i\sqrt[-]{k} = \frac{\sqrt{2}}{2} i - \frac{\sqrt{2}}{2} j\end{aligned}$$</p><p>These 24 elements make up a group <a href="https://en.wikipedia.org/wiki/Octahedral_symmetry#Full_octahedral_symmetry" target="_blank" rel="noopener">$O_{h}$</a>,that means they are closed for multiplication, and the multiplication satisfys the associative law.</p><p>And this is the group multiplication table:</p><p>$\begin{matrix}\times &amp; \boldsymbol{\alpha} &amp; \boldsymbol{\beta} &amp; \boldsymbol{\gamma} &amp; \boldsymbol{\delta} &amp; \boldsymbol{\epsilon} &amp; \boldsymbol{\zeta} &amp; \boldsymbol{\eta} &amp; \boldsymbol{\theta} &amp; \boldsymbol{\iota} &amp; \boldsymbol{\kappa} &amp; \boldsymbol{\lambda} &amp; \boldsymbol{\mu} &amp; \boldsymbol{\nu} &amp; \boldsymbol{\xi} &amp; \boldsymbol{\omicron} &amp; \boldsymbol{\pi} &amp; \boldsymbol{\rho} &amp; \boldsymbol{\sigma} &amp; \boldsymbol{\tau} &amp; \boldsymbol{\upsilon} &amp; \boldsymbol{\phi} &amp; \boldsymbol{\chi} &amp; \boldsymbol{\psi} &amp; \boldsymbol{\omega} \\\boldsymbol{\alpha} &amp; \alpha &amp; \beta &amp; \gamma &amp; \delta &amp; \epsilon &amp; \zeta &amp; \eta &amp; \theta &amp; \iota &amp; \kappa &amp; \lambda &amp; \mu &amp; \nu &amp; \xi &amp; \omicron &amp; \pi &amp; \rho &amp; \sigma &amp; \tau &amp; \upsilon &amp; \phi &amp; \chi &amp; \psi &amp; \omega \\\boldsymbol{\beta} &amp; \beta &amp; \alpha &amp; \delta &amp; \gamma &amp; \theta &amp; \chi &amp; \omega &amp; \epsilon &amp; \phi &amp; \psi &amp; \pi &amp; \omicron &amp; \sigma &amp; \rho &amp; \mu &amp; \lambda &amp; \xi &amp; \nu &amp; \upsilon &amp; \tau &amp; \iota &amp; \zeta &amp; \kappa &amp; \eta \\\boldsymbol{\gamma} &amp; \gamma &amp; \delta &amp; \alpha &amp; \beta &amp; \tau &amp; \iota &amp; \psi &amp; \upsilon &amp; \zeta &amp; \omega &amp; \mu &amp; \lambda &amp; \rho &amp; \sigma &amp; \pi &amp; \omicron &amp; \nu &amp; \xi &amp; \epsilon &amp; \theta &amp; \chi &amp; \phi &amp; \eta &amp; \kappa \\\boldsymbol{\delta} &amp; \delta &amp; \gamma &amp; \beta &amp; \alpha &amp; \upsilon &amp; \phi &amp; \kappa &amp; \tau &amp; \chi &amp; \eta &amp; \omicron &amp; \pi &amp; \xi &amp; \nu &amp; \lambda &amp; \mu &amp; \sigma &amp; \rho &amp; \theta &amp; \epsilon &amp; \zeta &amp; \iota &amp; \omega &amp; \psi \\\boldsymbol{\epsilon} &amp; \epsilon &amp; \theta &amp; \upsilon &amp; \tau &amp; \beta &amp; \xi &amp; \lambda &amp; \alpha &amp; \nu &amp; \mu &amp; \omega &amp; \psi &amp; \phi &amp; \chi &amp; \kappa &amp; \eta &amp; \zeta &amp; \iota &amp; \gamma &amp; \delta &amp; \sigma &amp; \rho &amp; \omicron &amp; \pi \\\boldsymbol{\zeta} &amp; \zeta &amp; \phi &amp; \iota &amp; \chi &amp; \lambda &amp; \gamma &amp; \rho &amp; \omicron &amp; \alpha &amp; \xi &amp; \tau &amp; \epsilon &amp; \eta &amp; \omega &amp; \upsilon &amp; \theta &amp; \psi &amp; \kappa &amp; \mu &amp; \pi &amp; \delta &amp; \beta &amp; \nu &amp; \sigma \\\boldsymbol{\eta} &amp; \eta &amp; \psi &amp; \omega &amp; \kappa &amp; \nu &amp; \lambda &amp; \delta &amp; \rho &amp; \pi &amp; \alpha &amp; \phi &amp; \iota &amp; \upsilon &amp; \epsilon &amp; \zeta &amp; \chi &amp; \tau &amp; \theta &amp; \sigma &amp; \xi &amp; \omicron &amp; \mu &amp; \gamma &amp; \beta \\\boldsymbol{\theta} &amp; \theta &amp; \epsilon &amp; \tau &amp; \upsilon &amp; \alpha &amp; \rho &amp; \pi &amp; \beta &amp; \sigma &amp; \omicron &amp; \eta &amp; \kappa &amp; \iota &amp; \zeta &amp; \psi &amp; \omega &amp; \chi &amp; \phi &amp; \delta &amp; \gamma &amp; \nu &amp; \xi &amp; \mu &amp; \lambda \\\boldsymbol{\iota} &amp; \iota &amp; \chi &amp; \zeta &amp; \phi &amp; \mu &amp; \alpha &amp; \nu &amp; \pi &amp; \gamma &amp; \sigma &amp; \epsilon &amp; \tau &amp; \psi &amp; \kappa &amp; \theta &amp; \upsilon &amp; \eta &amp; \omega &amp; \lambda &amp; \omicron &amp; \beta &amp; \delta &amp; \rho &amp; \xi \\\boldsymbol{\kappa} &amp; \kappa &amp; \omega &amp; \psi &amp; \eta &amp; \xi &amp; \omicron &amp; \alpha &amp; \sigma &amp; \mu &amp; \delta &amp; \zeta &amp; \chi &amp; \epsilon &amp; \upsilon &amp; \phi &amp; \iota &amp; \theta &amp; \tau &amp; \rho &amp; \nu &amp; \lambda &amp; \pi &amp; \beta &amp; \gamma \\\boldsymbol{\lambda} &amp; \lambda &amp; \omicron &amp; \pi &amp; \mu &amp; \phi &amp; \omega &amp; \tau &amp; \zeta &amp; \eta &amp; \epsilon &amp; \sigma &amp; \nu &amp; \delta &amp; \beta &amp; \xi &amp; \rho &amp; \gamma &amp; \alpha &amp; \iota &amp; \chi &amp; \kappa &amp; \psi &amp; \upsilon &amp; \theta \\\boldsymbol{\mu} &amp; \mu &amp; \pi &amp; \omicron &amp; \lambda &amp; \chi &amp; \kappa &amp; \epsilon &amp; \iota &amp; \psi &amp; \tau &amp; \xi &amp; \rho &amp; \beta &amp; \delta &amp; \sigma &amp; \nu &amp; \alpha &amp; \gamma &amp; \zeta &amp; \phi &amp; \omega &amp; \eta &amp; \theta &amp; \upsilon \\\boldsymbol{\nu} &amp; \nu &amp; \rho &amp; \xi &amp; \sigma &amp; \psi &amp; \epsilon &amp; \phi &amp; \eta &amp; \upsilon &amp; \iota &amp; \beta &amp; \gamma &amp; \omicron &amp; \mu &amp; \alpha &amp; \delta &amp; \lambda &amp; \pi &amp; \omega &amp; \kappa &amp; \theta &amp; \tau &amp; \zeta &amp; \chi \\\boldsymbol{\xi} &amp; \xi &amp; \sigma &amp; \nu &amp; \rho &amp; \omega &amp; \upsilon &amp; \zeta &amp; \kappa &amp; \epsilon &amp; \chi &amp; \gamma &amp; \beta &amp; \lambda &amp; \pi &amp; \delta &amp; \alpha &amp; \omicron &amp; \mu &amp; \psi &amp; \eta &amp; \tau &amp; \theta &amp; \phi &amp; \iota \\\boldsymbol{\omicron} &amp; \omicron &amp; \lambda &amp; \mu &amp; \pi &amp; \zeta &amp; \psi &amp; \theta &amp; \phi &amp; \kappa &amp; \upsilon &amp; \rho &amp; \xi &amp; \alpha &amp; \gamma &amp; \nu &amp; \sigma &amp; \beta &amp; \delta &amp; \chi &amp; \iota &amp; \eta &amp; \omega &amp; \epsilon &amp; \tau \\\boldsymbol{\pi} &amp; \pi &amp; \mu &amp; \lambda &amp; \omicron &amp; \iota &amp; \eta &amp; \upsilon &amp; \chi &amp; \omega &amp; \theta &amp; \nu &amp; \sigma &amp; \gamma &amp; \alpha &amp; \rho &amp; \xi &amp; \delta &amp; \beta &amp; \phi &amp; \zeta &amp; \psi &amp; \kappa &amp; \tau &amp; \epsilon \\\boldsymbol{\rho} &amp; \rho &amp; \nu &amp; \sigma &amp; \xi &amp; \eta &amp; \tau &amp; \chi &amp; \psi &amp; \theta &amp; \zeta &amp; \delta &amp; \alpha &amp; \pi &amp; \lambda &amp; \gamma &amp; \beta &amp; \mu &amp; \omicron &amp; \kappa &amp; \omega &amp; \upsilon &amp; \epsilon &amp; \iota &amp; \phi \\\boldsymbol{\sigma} &amp; \sigma &amp; \xi &amp; \rho &amp; \nu &amp; \kappa &amp; \theta &amp; \iota &amp; \omega &amp; \tau &amp; \phi &amp; \alpha &amp; \delta &amp; \mu &amp; \omicron &amp; \beta &amp; \gamma &amp; \pi &amp; \lambda &amp; \eta &amp; \psi &amp; \epsilon &amp; \upsilon &amp; \chi &amp; \zeta \\\boldsymbol{\tau} &amp; \tau &amp; \upsilon &amp; \theta &amp; \epsilon &amp; \delta &amp; \sigma &amp; \mu &amp; \gamma &amp; \rho &amp; \lambda &amp; \kappa &amp; \eta &amp; \chi &amp; \phi &amp; \omega &amp; \psi &amp; \iota &amp; \zeta &amp; \alpha &amp; \beta &amp; \xi &amp; \nu &amp; \pi &amp; \omicron \\\boldsymbol{\upsilon} &amp; \upsilon &amp; \tau &amp; \epsilon &amp; \theta &amp; \gamma &amp; \nu &amp; \omicron &amp; \delta &amp; \xi &amp; \pi &amp; \psi &amp; \omega &amp; \zeta &amp; \iota &amp; \eta &amp; \kappa &amp; \phi &amp; \chi &amp; \beta &amp; \alpha &amp; \rho &amp; \sigma &amp; \lambda &amp; \mu \\\boldsymbol{\phi} &amp; \phi &amp; \zeta &amp; \chi &amp; \iota &amp; \omicron &amp; \beta &amp; \sigma &amp; \lambda &amp; \delta &amp; \nu &amp; \theta &amp; \upsilon &amp; \kappa &amp; \psi &amp; \epsilon &amp; \tau &amp; \omega &amp; \eta &amp; \pi &amp; \mu &amp; \alpha &amp; \gamma &amp; \xi &amp; \rho \\\boldsymbol{\chi} &amp; \chi &amp; \iota &amp; \phi &amp; \zeta &amp; \pi &amp; \delta &amp; \xi &amp; \mu &amp; \beta &amp; \rho &amp; \upsilon &amp; \theta &amp; \omega &amp; \eta &amp; \tau &amp; \epsilon &amp; \kappa &amp; \psi &amp; \omicron &amp; \lambda &amp; \gamma &amp; \alpha &amp; \sigma &amp; \nu \\\boldsymbol{\psi} &amp; \psi &amp; \eta &amp; \kappa &amp; \omega &amp; \rho &amp; \mu &amp; \beta &amp; \nu &amp; \omicron &amp; \gamma &amp; \chi &amp; \zeta &amp; \theta &amp; \tau &amp; \iota &amp; \phi &amp; \epsilon &amp; \upsilon &amp; \xi &amp; \sigma &amp; \pi &amp; \lambda &amp; \alpha &amp; \delta \\\boldsymbol{\omega} &amp; \omega &amp; \kappa &amp; \eta &amp; \psi &amp; \sigma &amp; \pi &amp; \gamma &amp; \xi &amp; \lambda &amp; \beta &amp; \iota &amp; \phi &amp; \tau &amp; \theta &amp; \chi &amp; \zeta &amp; \upsilon &amp; \epsilon &amp; \nu &amp; \rho &amp; \mu &amp; \omicron &amp; \delta &amp; \alpha\end{matrix}$</p><p>This is the multiplication visualization:</p><figure><iframe src="/klstudio/embed.html#/documents/cube-multiplication-demo" width="600" height="280"></iframe></figure><h2 id="Cubies’-position-representation">Cubies’ position representation</h2><p>In 3-order Rubik’s cube, we have $3^3-1=26$ cubies.And this is the second lucky thing: there are 26 Latin letters in total.So we can labeled 26 cubie positions by A-Z. It looks like this:</p><figure><span class="max600"><span class="fixed-ratio" style="width: 100%; padding-top: 100%"><iframe src="/klstudio/embed.html#/documents/static-labeled-cube3-demo"></iframe></span></span><figcaption>Rubik's cube with labels on cubies</figcaption></figure><p>Mathematically, we define 26 one-hot vectors:</p><p>$$\boldsymbol{A} = (\mathbf{1}, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) \\\boldsymbol{B} = (0, \mathbf{1}, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) \\\boldsymbol{C} = (0, 0, \mathbf{1}, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) \\… \\\boldsymbol{Z} = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \mathbf{1})$$</p><p>This form is convenient for constructing matrices, e.g. a 26×26 identity matrix can be represented as:</p><p>$$\begin{bmatrix}\boldsymbol{A}^T &amp; \boldsymbol{B}^T &amp; \boldsymbol{C}^T &amp; … &amp; \boldsymbol{X}^T &amp; \boldsymbol{Y}^T &amp; \boldsymbol{Z}^T\end{bmatrix}^T$$</p><h2 id="Cube-rotation-and-position-permutation">Cube rotation and position permutation</h2><p>Rotation causes displacement, it’s a kind of linear transformation. We can see this clearly in matrix.Take this simple example firstly:</p><figure><picture><img src="/images/rect2x2-permutation.drawio.svg" /></picture></figure><style>.red{color: red;}</style><p>We have 4 (2×2) boxes labeled by red <em class="red">A</em> <em class="red">B</em> <em class="red">C</em> <em class="red">D</em>,and we have 4 fixed cells labeled by black <em>A</em> <em>B</em> <em>C</em> <em>D</em>.</p><p>Before and after a 90° rotation, we record boxes’ position in a 4×4 table:</p><style>table td{text-align: center;}table.no-border{border: 0;}table.no-border > tbody > tr > td{border: 0;}table strong{color: red;}</style><table class="no-border"><tr><td><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th></tr></thead><tbody><tr><td style="text-align:center"><strong>A</strong></td><td style="text-align:center">1</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>B</strong></td><td style="text-align:center"></td><td style="text-align:center">1</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>C</strong></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">1</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>D</strong></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">1</td></tr></tbody></table></td><td style="font-size: 400%">&#x21e8;</td><td><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th></tr></thead><tbody><tr><td style="text-align:center"><strong>A</strong></td><td style="text-align:center"></td><td style="text-align:center">1</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>B</strong></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">1</td></tr><tr><td style="text-align:center"><strong>C</strong></td><td style="text-align:center">1</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>D</strong></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">1</td><td style="text-align:center"></td></tr></tbody></table></td></table><p>So this is the matrix’s meaning, every row tells us which cell the box is at.</p><p>$$\alpha\begin{bmatrix}1 &amp;  &amp;  &amp; \\&amp; 1 &amp;  &amp; \\&amp;  &amp; 1 &amp; \\&amp;  &amp;  &amp;1\end{bmatrix} \to \eta \begin{bmatrix}&amp; 1 &amp;  &amp; \\&amp;  &amp;  &amp; 1 \\1 &amp;  &amp;  &amp; \\&amp;  &amp; 1 &amp;\end{bmatrix} = \begin{bmatrix}&amp; \eta &amp;  &amp; \\&amp;  &amp;  &amp; \eta \\\eta &amp;  &amp;  &amp; \\&amp;  &amp; \eta &amp;\end{bmatrix}$$</p><p>And plused an orientation scalar in Greek letters.(Why <em>η</em>? Try to look up what <em>η</em> stands for in the 24 knights figure.)</p><p>Now let’s extend 2×2 into 26×26:</p><figure><iframe src="/klstudio/embed.html#/documents/dynamic-labeled-cube3-demo" width="960" height="600"></iframe></figure><p>For the matrix you see above, I arranged the cubies’ order as this:</p><figure><picture><img src="/images/cube3-matrix-illustration.drawio.svg" style="max-width: 600px" /></picture></figure><p>A state matrix can be decomposed into 2 parts: orientations and position permutation.And position permutation is determined by orientations, so to present a Rubik’s cube state we only need to record a vector of orientation symbols.Mathematically, we have a state vector:</p><p>$$S=o_i | _{i=1,…,26}$$</p><p>while</p><p>$$o_i \in \left \{ \alpha, \beta, \gamma, …, \omega \right \}$$</p><p>then the state matrix is:</p><p>$$mat(S)=diag(S) \cdot displace(o_i, P_i)^T|_{i=1,…,26}$$</p><p>$$P_i = \boldsymbol{A}, \boldsymbol{B}, \boldsymbol{C}, …, \boldsymbol{Z} |_{\text{when } i=1,…,26}$$</p><p>while <em>diag</em> stands for diagonal matrix, <em>displace</em> is a position mapping by a specific orientation, from a one-hot position vector to another.This is the dispacement table:</p><p>$$\begin{matrix}\text{displace} &amp; \alpha &amp; \beta &amp; \gamma &amp; … \\\color{red} A &amp; \boldsymbol{A} &amp; \boldsymbol{G} &amp; \boldsymbol{F} &amp; … \\\color{red} B &amp; \boldsymbol{B} &amp; \boldsymbol{H} &amp; \boldsymbol{E} &amp; … \\\color{red} C &amp; \boldsymbol{C} &amp; \boldsymbol{E} &amp; \boldsymbol{H} &amp; … \\… &amp; &amp; &amp; &amp;\end{matrix}$$</p><p>The whole table is 26×24, what shows here is a part, and you can imagine the rest.</p><p>Let’s take the top matrix in this blog (<a href="/klstudio/embed.html#/documents/dynamic-labeled-cube3#LKONLKONLOKNLKONKLNOGCAAFD">the tetris pattern</a>) as an example:</p><p>$\begin{aligned}&amp; mat(\omicron, \lambda, \pi, \mu, \omicron, \lambda, \pi, \mu, \lambda, \omicron, \omicron, \lambda, \pi, \mu, \pi, \mu, \omicron, \mu, \lambda, \pi, \eta, \kappa, \iota, \zeta, \alpha, \alpha) \\= &amp; diag(\omicron, \lambda, \pi, \mu, \omicron, \lambda, \pi, \mu, \lambda, \omicron, \omicron, \lambda, \pi, \mu, \pi, \mu, \omicron, \mu, \lambda, \pi, \eta, \kappa, \iota, \zeta, \alpha, \alpha) \cdot \left [ F^T C^T B^T G^T H^T A^T D^T E^T O^T P^T S^T Q^T L^T K^T R^T T^T J^T N^T I^T M^T U^T V^T W^T X^T Y^T Z^T \right ]\end{aligned}$</p><p>For short, I will refer it as:</p><p>$$\left \langle \omicron \lambda \pi \mu \omicron \lambda \pi \mu \lambda \omicron \omicron \lambda \pi \mu \pi \mu \omicron \mu \lambda \pi \eta \kappa \iota \zeta \alpha \alpha \right \rangle$$</p><h3 id="State-space-capacity">State space capacity</h3><p>3D object has 3 degrees of freedom in rotation, but the most convenient method to represent it is using 4 fields, i.e. quaternion.So a proper state space redundancy is necessary for the sake of calculation.</p><p>A valid 3-order Rubik’s cube’s total variation is:</p><p>$$\frac{8! \times 3^8 \times 12! \times 2^{12}}{2 \times 2 \times 3} = 43252003274489856000 \approx 4.33 \times 10^{19}$$</p><p>If allowing disassembly, the number becomes twelve times larger:</p><p>$$8! \times 3^8 \times 12! \times 2^{12} = 519024039293878272000 \approx 5.19 \times 10^{20}$$</p><p>Besides that, representing a Rubik’s cube state in orientation vector ignores cubies’ position conflicting. The total variation is:</p><p>$$24^{20} = 4019988717840603673710821376 \approx 4.02 \times 10^{28}$$</p><p>(For equality, I ignored 6 axes cubies here.)</p><p>And above all these, the facet color scheme allow painting abitrary color in 6 kinds for every facet. Its total variation is:</p><p>$$6^{48} = 22452257707354557240087211123792674816 \approx 2.25 \times 10^{38}$$</p><p>As a Rubik’s cube computer implementation, I’m afraid the redundancy of this scheme is beyond necessary, and is waste and misleading.</p><h2 id="Calculation-of-Rubik’s-cube">Calculation of Rubik’s cube</h2><p>Once we represent a Rubik’s cube state by a matrix, we can calculate it purely by algebra.This is an example to show what the Rubik’s cube multiplication looks like:</p><figure><iframe src="/klstudio/embed.html#/documents/cube3-multiplication-demo" width="800" height="400"></iframe></figure><p>As all groups, Rubik’s cube multiplication obeys associative law, but is not exchangeable.</p><h2 id="Rubik’s-cube-solver">Rubik’s cube solver</h2><p>Now, we known this significant fact: <strong>the Rubik’s cube solver problem is a matrix decomposition problem</strong>!</p><p>Specifically, we have 12 unit quarter twists in matrix form:</p><p>$$\begin{aligned}&amp; U = \left \langle  \alpha \alpha \zeta \zeta \alpha \alpha \zeta \zeta  \alpha \alpha \alpha \alpha \zeta \zeta \zeta \zeta \alpha \alpha \alpha \alpha  \alpha \alpha \zeta \alpha \alpha \alpha  \right \rangle \\&amp; U’ = \left \langle  \alpha \alpha \iota \iota \alpha \alpha \iota \iota  \alpha \alpha \alpha \alpha \iota \iota \iota \iota \alpha \alpha \alpha \alpha  \alpha \alpha \iota \alpha \alpha \alpha  \right \rangle \\&amp; D = \left \langle  \iota \iota \alpha \alpha \iota \iota \alpha \alpha  \iota \iota \iota \iota \alpha \alpha \alpha \alpha \alpha \alpha \alpha \alpha  \alpha \alpha \alpha \iota \alpha \alpha  \right \rangle \\&amp; D’ = \left \langle  \zeta \zeta \alpha \alpha \zeta \zeta \alpha \alpha  \zeta \zeta \zeta \zeta \alpha \alpha \alpha \alpha \alpha \alpha \alpha \alpha  \alpha \alpha \alpha \zeta \alpha \alpha  \right \rangle \\&amp; L = \left \langle  \theta \alpha \theta \alpha \theta \alpha \theta \alpha  \alpha \alpha \theta \alpha \alpha \alpha \theta \alpha \theta \alpha \alpha \theta  \alpha \alpha \alpha \alpha \theta \alpha  \right \rangle \\&amp; L’ = \left \langle  \epsilon \alpha \epsilon \alpha \epsilon \alpha \epsilon \alpha  \alpha \alpha \epsilon \alpha \alpha \alpha \epsilon \alpha \epsilon \alpha \alpha \epsilon  \alpha \alpha \alpha \alpha \epsilon \alpha  \right \rangle \\&amp; R = \left \langle  \alpha \epsilon \alpha \epsilon \alpha \epsilon \alpha \epsilon  \alpha \alpha \alpha \epsilon \alpha \alpha \alpha \epsilon \alpha \epsilon \alpha \epsilon  \alpha \alpha \alpha \alpha \alpha \epsilon  \right \rangle \\&amp; R’ = \left \langle  \alpha \theta \alpha \theta \alpha \theta \alpha \theta  \alpha \alpha \alpha \theta \alpha \alpha \alpha \theta \alpha \theta \alpha \theta  \alpha \alpha \alpha \alpha \alpha \theta  \right \rangle \\&amp; F = \left \langle  \eta \eta \eta \eta \alpha \alpha \alpha \alpha  \eta \alpha \alpha \alpha \eta \alpha \alpha \alpha \eta \eta \alpha \alpha  \eta \alpha \alpha \alpha \alpha \alpha  \right \rangle \\&amp; F’ = \left \langle  \kappa \kappa \kappa \kappa \alpha \alpha \alpha \alpha  \kappa \alpha \alpha \alpha \kappa \alpha \alpha \alpha \kappa \kappa \alpha \alpha  \kappa \alpha \alpha \alpha \alpha \alpha  \right \rangle \\&amp; B = \left \langle  \alpha \alpha \alpha \alpha \kappa \kappa \kappa \kappa  \alpha \kappa \alpha \alpha \alpha \kappa \alpha \alpha \alpha \alpha \kappa \kappa  \alpha \kappa \alpha \alpha \alpha \alpha  \right \rangle \\&amp; B’ = \left \langle  \alpha \alpha \alpha \alpha \eta \eta \eta \eta  \alpha \eta \alpha \alpha \alpha \eta \alpha \alpha \alpha \alpha \eta \eta  \alpha \eta \alpha \alpha \alpha \alpha  \right \rangle \\\end{aligned}$$</p><p>To find a path from the solved state to an arbitrary state, is just finding a multiplication decomposition in unit twists for the specific state matrix.</p><p>We known that any 3-order Rubik’s cube state can be solved in 26 quarter twists in most<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>.But finding the shortest solution is still a pending problem.I hope the matrix representation can provide some new approaches for this problem. After all, linear algebra is a highly developed domain already.</p><h2 id="Try-it-youself">Try it youself</h2><figure><iframe src="/klstudio/embed.html#/documents/dynamic-labeled-cube3" width="960" height="600"></iframe><figcaption>Twist this Rubik's cube and see its matrix. <a target="_blank" href="/klstudio/#/documents/dynamic-labeled-cube3">Open in new tab &#x1f855;</a></figcaption></figure><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="http://www.cube20.org/qtm/" target="_blank" rel="noopener">God’s Number is 26 in the Quarter-Turn Metric</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    <summary type="html">
    
      &lt;figure&gt;
	&lt;picture&gt;
		&lt;img src=&quot;/images/cube3-matrix-tetris.svg&quot; alt=&quot;a cube3 matrix samle #LKONLKONLOKNLKONKLNOGCAAFD&quot; /&gt;
	&lt;/picture&gt;
	&lt;figcaption&gt;
		Guess what this is? &lt;a target=&quot;_blank&quot; href=&quot;/klstudio/#/documents/dynamic-labeled-cube3#LKONLKONLOKNLKONKLNOGCAAFD&quot;&gt;See the answer here.&lt;/a&gt;
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;To describe a chess game state, you don’t need to mention every chess piece’s details.
Essentially, a chess piece is just a symbol. Ignoring appearance detail helps us to grab the game gist.
Till now, a popular way to represent a Rubik’s cube state is the facelets expanding graph, like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/cube3-expand-graph-original.png&quot; alt=&quot;a cube3 expanding graph sample&quot;&gt;&lt;/p&gt;
&lt;p&gt;By this way, you can’t tell which facelets are adjacent each other straightway, also it’s hard to imagine what the cube will change into after a twist applied.
That because it comes from the appearance, but not the essential.
Furtherly, as &lt;a href=&quot;/2020/02/05/cube-algebra/#Motivation&quot;&gt;my preivous blog&lt;/a&gt; wrote, Rubik’s Cube solver programs who construct cube state from facelet color is clumsy.
Rubik’s Cube is a game about cubes’s &lt;strong&gt;rotation&lt;/strong&gt; and &lt;strong&gt;permutation&lt;/strong&gt; (but not painting color), &lt;strong&gt;matrix&lt;/strong&gt; is the most proper math tool here.&lt;/p&gt;
&lt;p&gt;However, the fact revealed by this method is not easy to see through, and that is just what I will tell you in this blog.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="algebra" scheme="https://k-l-lambda.github.io/tags/algebra/"/>
    
      <category term="rubiks_cube" scheme="https://k-l-lambda.github.io/tags/rubiks-cube/"/>
    
  </entry>
  
  <entry>
    <title>A Postscript for StyleGAN Mapping Network Geometry Visualization</title>
    <link href="https://k-l-lambda.github.io/2020/04/25/stylegan-mapping-tsne/"/>
    <id>https://k-l-lambda.github.io/2020/04/25/stylegan-mapping-tsne/</id>
    <published>2020-04-25T11:52:06.000Z</published>
    <updated>2022-08-19T08:51:12.991Z</updated>
    
    <content type="html"><![CDATA[<figure><picture><img src="/images/stylegan-mapping-sampling-pca.png" class="figure" width="400" alt="StyleGAN mapping sampling points visualization by embedding projector"></picture><figcaption><p>StyleGAN mapping sampling points visualization by embedding projector</p><p><a href="https://projector.tensorflow.org/?config=https://gist.githubusercontent.com/k-l-lambda/ec91b00e74a62b6435ec098138f9ab0d/raw/df0e1a3f7a8e29476e30c723038f425f71bba0bd/embedding-projector-config.json" target="_blank" rel="noopener">click here to see 3D visulization</a></p></figcaption></figure><p>Some days after the former post of <a href="/2020/02/10/stylegan-mapping/">StyleGAN Mapping Network Geometry Visualization</a>,I realized that there are some canonical dimension reduction methods for data visualization, such as <a href="https://en.wikipedia.org/wiki/Principal_component_analysis" target="_blank" rel="noopener">PCA</a>, <a href="https://en.wikipedia.org/wiki/T-distributed_stochastic_neighbor_embedding" target="_blank" rel="noopener">t-SNE</a>.These ways may be more intuitive to show data characteristics. So I did some attempts on this.</p><a id="more"></a><p>Firstly I tried a <a href="https://github.com/tensorflow/tfjs-tsne" target="_blank" rel="noopener">t-SNE implementation by tensorflow.js</a>,disappointedly, after a moment struggling against release version compatibility problem,I found that the upper limit of data dimensions is merely 40 on a browser WebGL backend, while SytleGAN W space is 512-d.</p><p>Finally, I give up the attempt of a more sophisticated t-SNE implementation,I found the <a href="https://projector.tensorflow.org/" target="_blank" rel="noopener">tensorflow embedding projector</a> is a not bad option.Its integration with github gist is handy.</p><p>This is the <a href="https://projector.tensorflow.org/?config=https://gist.githubusercontent.com/k-l-lambda/ec91b00e74a62b6435ec098138f9ab0d/raw/df0e1a3f7a8e29476e30c723038f425f71bba0bd/embedding-projector-config.json" target="_blank" rel="noopener"><strong>live 3D visualization</strong></a>.It seems t-SNE result is more smooth, but a bit unstable.For t-SNE, the result to the experiment of one random circle, points will convergence to a nearly regular round.That seems mainly caused by lack of adjacencies on a circle sampling. Then I made a configuration of 3 random circles, as shown in the top illustration.Most dimension reduction algorithm normalized original data, therefore the bias information is lost. That is a disadvantage.</p>]]></content>
    
    <summary type="html">
    
      &lt;figure&gt;
	&lt;picture&gt;
		&lt;img src=&quot;/images/stylegan-mapping-sampling-pca.png&quot; class=&quot;figure&quot; width=&quot;400&quot; alt=&quot;StyleGAN mapping sampling points visualization by embedding projector&quot;&gt;
	&lt;/picture&gt;
	&lt;figcaption&gt;
		&lt;p&gt;StyleGAN mapping sampling points visualization by embedding projector&lt;/p&gt;
		&lt;p&gt;&lt;a href=&quot;https://projector.tensorflow.org/?config=https://gist.githubusercontent.com/k-l-lambda/ec91b00e74a62b6435ec098138f9ab0d/raw/df0e1a3f7a8e29476e30c723038f425f71bba0bd/embedding-projector-config.json&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;click here to see 3D visulization&lt;/a&gt;&lt;/p&gt;
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Some days after the former post of &lt;a href=&quot;/2020/02/10/stylegan-mapping/&quot;&gt;StyleGAN Mapping Network Geometry Visualization&lt;/a&gt;,
I realized that there are some canonical dimension reduction methods for data visualization, such as &lt;a href=&quot;https://en.wikipedia.org/wiki/Principal_component_analysis&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PCA&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/T-distributed_stochastic_neighbor_embedding&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;t-SNE&lt;/a&gt;.
These ways may be more intuitive to show data characteristics. So I did some attempts on this.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="deep_learning" scheme="https://k-l-lambda.github.io/tags/deep-learning/"/>
    
      <category term="stylegan" scheme="https://k-l-lambda.github.io/tags/stylegan/"/>
    
  </entry>
  
  <entry>
    <title>StyleGAN Mapping Network Geometry Visualization</title>
    <link href="https://k-l-lambda.github.io/2020/02/10/stylegan-mapping/"/>
    <id>https://k-l-lambda.github.io/2020/02/10/stylegan-mapping/</id>
    <published>2020-02-10T14:22:52.000Z</published>
    <updated>2022-08-19T08:51:12.991Z</updated>
    
    <content type="html"><![CDATA[<figure><picture><source srcset="/images/stylegan-network.webp" type="image/webp" /><source srcset="/images/stylegan-network.png" type="image/png" /><img src="/images/stylegan-network.png" width="240" /></picture><picture><source srcset="/images/stylegan-geometry.webp" type="image/webp" /><source srcset="/images/stylegan-geometry.jpg" type="image/jpeg" /><img src="/images/stylegan-geometry.jpg" width="600" /></picture><figcaption>StyleGAN generator network architecture & geometry conceptual illustration</figcaption></figure><p><a href="https://github.com/NVlabs/stylegan2" target="_blank" rel="noopener">StyleGAN</a><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> <sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup> generator network has two parts: full-connected mapping network (named <em><code>mapping</code></em>), and pyramid CNN synthesis network (named <em><code>g</code></em>).<code>Mapping</code> is a transformation from dimension 512 to 512, and <code>g</code> is a transformation from dimension 512 to 1024×1024×3.The design of <code>mapping</code> is intended to disentangle the manifold mapping from latent space to feature variation space.I’m interested in how the shape of learned mapping in network warps exactly, so this is my experiment.</p><a id="more"></a><p>By normalization at the beginning of mapping network, input z vectors are on the regular 512-d unit spherical surface.Supposing <code>mapping</code> is a continuous function, all possible w points from Z will distribute on a irregular closed 512-d surface.To show a 512-d manifold is difficult, for humans only have 2-d vision. But we can show some local characteristics by dimension slicing.</p><p>Here is my way. Pick a geodesic line on sphere, i.e. a great circle, map it into W space, then show the warped result circle.To get a great circle of 512-d sphere, for generility, random sample 2 points (by a standard normal distribution sample then normalize it),then slerp between and beyond them multiple times evenly, until finished one cycle on the sphere.To show the 512-d result circle, I simply project the high dimensional line into multiple low dimensional lines.I.e. for every point <em>w</em> in the result circle:</p><p>$$ \textbf{w}: [w_{1}, w_{2}, w_{3}, …, w_{512}] \rightarrow \{[w_{1}, w_{2}, w_{3}], [w_{4}, w_{5}, w_{6}], …\} $$</p><p>Then plot the projections in a 3D coordinate system viewport, as you see below.</p><figure><span class="fixed-ratio" style="width: 100%; padding-top: 66%; padding-top: min(66%, 586px); max-width: 1025px"><iframe src="/klstudio/embed.html#/documents/stylegan-mapping"></iframe></span><figcaption>Evenly interpolated 96 points on a great circle of unit sphere. <br />Sample circles: 1 specified (on the plane of first 2 axes) and 5 random. <br />The mapping network is from <em>stylegan2-ffhq-config-f</em><sup><a target="_blank" href="https://github.com/NVlabs/stylegan2/blob/master/pretrained_networks.py#L32">source</a></sup>.</figcaption></figure><p>As you see in the plotting, projected circles entwines in most dimensions. So the mapping from Z to W is more rugged than I expected in the conceptual illustration.Intervals between neighbor points, though not very even, but high dimensional gauge can’t be speculated by low dimensional projections.</p><p>When you select very many dimensions (by moving the second slider to right), you will see the overall distribution of points’ coordinates.It may be a significant observation that most points congregate at the first octant (+, +, +), more exactly, the tetrahedron area with vertices about <em>(0, 0, 0), (1.5, 0, 0), (0, 1.5, 0), (0, 0, 1.5)</em>.This phenomenon reminds <a href="https://en.wikipedia.org/wiki/Rectifier_(neural_networks)" target="_blank" rel="noopener">ReLU</a> activation’s effection.According to StyleGAN source code<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>, <em>Leaky ReLU</em> is used in mapping network by default, which coincides the ploting results.In some sense, the asymmetry may be necessary to disentanglement learning.But in a further thinking, considering the network is trained on a dataset from nature, why nature need such a specific asymmetry and where it come from?</p><p>Lastly, inspection on features of generated images. Let’s suppose there are some superplanes in the Z space, which split some binary high-level semantic features,such as male/female, young/old, skin color dark/light and so on (for some feature there is no definite boundary probably, but moving along some direction, i.e. plane’s normal vector, will change this feature most rapidly)<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>.And we can safely suppose that a random great circle (with a random normal vector) on unit sphere will intersect with most feature superplanes.In fact, considering the high dimensions, 2 random superplanes will be very closed to perpendicular in most cases.So we will get an interesting inference, generated images sampling from a great circle will experience many features variation: male/female, old/young, and anything else you can imagine.So such an experiment can be helpful to see the diversity of a GAN, and test how well fitted the network with dataset.</p><p>This is my StyleGAN <a href="https://github.com/k-l-lambda/stylegan-web" target="_blank" rel="noopener">web porting project</a> for research. A video demo:</p><a href="https://github.com/k-l-lambda/stylegan-web" target="_blank" rel="noopener"><video src="/images/explorer-demo.webm" style="width: 100%; max-width: 800px" autoplay loop></video></a><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>paper: <a href="https://arxiv.org/abs/1812.04948" target="_blank" rel="noopener">A Style-Based Generator Architecture for Generative Adversarial Networks</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>paper: <a href="https://arxiv.org/abs/1912.04958" target="_blank" rel="noopener">Analyzing and Improving the Image Quality of StyleGAN</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p><a href="https://github.com/NVlabs/stylegan2/blob/master/training/networks_stylegan2.py#L261" target="_blank" rel="noopener">mapping network code</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p>Someone may argue that feature space could be more straight for W than Z, but considering the highly irregular shape and the relation between <em>ψ</em> and feature intensity, I think it’s an open question. <a href="#fnref4" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    <summary type="html">
    
      &lt;figure&gt;
	&lt;picture&gt;
		&lt;source srcset=&quot;/images/stylegan-network.webp&quot; type=&quot;image/webp&quot; /&gt;
		&lt;source srcset=&quot;/images/stylegan-network.png&quot; type=&quot;image/png&quot; /&gt;
		&lt;img src=&quot;/images/stylegan-network.png&quot; width=&quot;240&quot; /&gt;
	&lt;/picture&gt;
	&lt;picture&gt;
		&lt;source srcset=&quot;/images/stylegan-geometry.webp&quot; type=&quot;image/webp&quot; /&gt;
		&lt;source srcset=&quot;/images/stylegan-geometry.jpg&quot; type=&quot;image/jpeg&quot; /&gt;
		&lt;img src=&quot;/images/stylegan-geometry.jpg&quot; width=&quot;600&quot; /&gt;
	&lt;/picture&gt;
	&lt;figcaption&gt;
		StyleGAN generator network architecture &amp; geometry conceptual illustration
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/NVlabs/stylegan2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;StyleGAN&lt;/a&gt;&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt; generator network has two parts: full-connected mapping network (named &lt;em&gt;&lt;code&gt;mapping&lt;/code&gt;&lt;/em&gt;), and pyramid CNN synthesis network (named &lt;em&gt;&lt;code&gt;g&lt;/code&gt;&lt;/em&gt;).
&lt;code&gt;Mapping&lt;/code&gt; is a transformation from dimension 512 to 512, and &lt;code&gt;g&lt;/code&gt; is a transformation from dimension 512 to 1024×1024×3.
The design of &lt;code&gt;mapping&lt;/code&gt; is intended to disentangle the manifold mapping from latent space to feature variation space.
I’m interested in how the shape of learned mapping in network warps exactly, so this is my experiment.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="deep_learning" scheme="https://k-l-lambda.github.io/tags/deep-learning/"/>
    
      <category term="stylegan" scheme="https://k-l-lambda.github.io/tags/stylegan/"/>
    
  </entry>
  
  <entry>
    <title>Cube Rotation Algebra</title>
    <link href="https://k-l-lambda.github.io/2020/02/05/cube-algebra/"/>
    <id>https://k-l-lambda.github.io/2020/02/05/cube-algebra/</id>
    <published>2020-02-05T17:00:57.000Z</published>
    <updated>2022-08-19T08:51:12.991Z</updated>
    
    <content type="html"><![CDATA[<figure><span class="max600"><span class="fixed-ratio" style="width: 100%; padding-top: 100%"><iframe src="/klstudio/embed.html#/documents/mesh-viewer-demo:quarter-array-4x6"></iframe></span></span><figcaption>In 3D space, an object has 6 &times; 4 = 24 orthogonal orientations in total.</figcaption></figure><h2 id="Motivation">Motivation</h2><p>Canonical Rubik’s Cube solver algorithm<sup><a href="https://github.com/hkociemba/RubiksCube-TwophaseSolver" target="_blank" rel="noopener">1</a></sup> constructs cube state from face colors and a lot of permutation rules. That may waste too many coding :)Face color is merely appearance, cubies’ orientation is essential.Since Rubik’s Cube seems already been used as the avatar of group theory (check this <a href="https://en.wikipedia.org/wiki/Group_theory" target="_blank" rel="noopener">wikipedia entry</a>),it’s better to clarify all details of the cube rotation group structure, and construct the whole Rubik’s Cube representations based on cubies’ orientation.</p><p>Regardless of Rubik’s Cube, orthogonal rotation in 3D space is usual and connected with interesting problems. E.g. how to quickly tell if 2 orthogonal <a href="https://en.wikipedia.org/wiki/Euler_angles" target="_blank" rel="noopener">Euler angles</a> are the same rotation, purely by algebra without experiment?<a href="https://en.wikipedia.org/wiki/Quaternion" target="_blank" rel="noopener">Quaternion calculus</a> may be a short answer, but when you do that, irrational numbers are inevitable, and that seems wasting and precise problematic.</p><p>Programmers prefer easy implementation, which based on a set of simple representation and rules applied to them. No float numbers, no redundancy.All you need is a multiplication table, and the table is highly symmetric, so let’s begin from analyzing the <strong>R</strong><sup>3</sup> orthogonal rotation group structure.</p><a id="more"></a><h2 id="Quaternion-space-half-reduction">Quaternion space half reduction</h2><p>In fact, we can invent a new symbol system to represent every element, but it may be a better choice to keep compatible with quaternion.However, by quaternion we should solve an ambiguity issue firstly. Because in <strong>R</strong><sup>3</sup> geometry, a pair of quaternion <em>±q</em> represent a same rotation.We need an assistant function to reduce redundancy.</p><p>We define a space half reduction sign function <strong>sgn<sub>h</sub></strong>:</p><p>$$sgn_{h}(a+bi+cj+dk) = \begin{cases}1 &amp; \text{ if } a&gt;0, \\&amp; \text{ or } a=0, b&gt;0, \\&amp; \text{ or } a=b=0, c&gt;0, \\&amp; \text{ or } a=b=c=0, d&gt;0, \\\\0 &amp; \text{ if } a=b=c=d=0, \\\\-1 &amp; \text{ otherwise. }\end{cases}$$</p><p>Then define the space half reduction absolute function <strong>abs<sub>h</sub></strong>:</p><p>$$abs_{h}(q) = sgn_{h}(q) \cdot q$$</p><p>In the quaternion <strong>R</strong><sup>4</sup> space, this function reflect (by centrosymmetric) a half space to the other side.And right on the reflection interface <strong>R</strong><sup>3</sup> subspace, do the same thing, and also for <strong>R</strong><sup>2</sup> interface, <strong>R</strong><sup>1</sup> interface recursively.</p><p>Then we define a shorthand representation</p><p>$$q \cong p$$</p><p>to stand for:</p><p>$$abs_{h}(q) = abs_{h}( p ),$$</p><p>which means <em>q = p</em> or <em>q = -p</em>, i.e. they represent the same <strong>R</strong><sup>3</sup> orientation/rotation. Obviously, this <em>half-reduction equal</em> also has transitivity as plain equal.</p><h2 id="Calculus">Calculus</h2><p>Before calculus, here are tips for readers unfamiliar with quaternion:</p><ul><li>imagine units <em>i</em>, <em>j</em>, <em>k</em> stand for 180° rotation along 3 axes in <strong>R</strong><sup>3</sup> respectively;</li><li>quaternion multiplication stands for rotations concatenation (not exchangable);</li><li>square root of imagine unit stands for 90° rotation;</li><li>q<sup>-1</sup> stands for the opponent rotation of q.</li></ul><p>Now we have these obvious facts:</p><p>$$i^{2} \cong j^{2} \cong k^{2} \cong 1$$</p><p>means 360° rotation returns to origin.</p><p>$$i \cong i^{-1} \\j \cong j^{-1} \\k \cong k^{-1}$$</p><p>means ±180° rotation (along a same axis) arrives the same orientation.</p><p>$$i^{\frac{3}{2}} \cong i^{-\frac{1}{2}} \\j^{\frac{3}{2}} \cong j^{-\frac{1}{2}} \\k^{\frac{3}{2}} \cong k^{-\frac{1}{2}}$$</p><p>means 270° rotation equal -90° rotation (along a same axis).</p><p>Not very obvious, but we can get rest items by computaion. The twice heterogeneous quarter rotation (can also be treated as 120° rotation along a cube diagonal):</p><p>$$\sqrt{i}\sqrt{j} = \sqrt{j}\sqrt{k} = \sqrt{k}\sqrt{i} \\\sqrt{i}\sqrt[-]{j} = \sqrt[-]{j}\sqrt[-]{k} = \sqrt[-]{k}\sqrt{i} \\\sqrt[-]{i}\sqrt{j} = \sqrt{j}\sqrt[-]{k} = \sqrt[-]{k}\sqrt[-]{i} \\\sqrt[-]{i}\sqrt[-]{j} = \sqrt[-]{j}\sqrt{k} = \sqrt[-]{i}\sqrt{k}$$</p><p>$$\sqrt{j}\sqrt{i} = \sqrt[-]{k}\sqrt{j} = \sqrt{i}\sqrt[-]{k} \\\sqrt[-]{j}\sqrt{i} = \sqrt{k}\sqrt[-]{j} = \sqrt{i}\sqrt{k} \\\sqrt{j}\sqrt[-]{i} = \sqrt{k}\sqrt{j} = \sqrt[-]{i}\sqrt{k} \\\sqrt[-]{j}\sqrt[-]{i} = \sqrt[-]{k}\sqrt[-]{j} = \sqrt[-]{i}\sqrt[-]{k}$$</p><p>Which $\sqrt[-]{x}$ stand for $x^{-\frac{1}{2}}$.</p><p>(Wait, does $\sqrt{i}$ make sense? Yes, $\sqrt{i} = \frac{\sqrt{2}}{2}(1 + i)$, try to do this math: $(\frac{\sqrt{2}}{2}(1 + i))^2$.)</p><p>These 8 lines don’t equal each other (notice that quaternion multiplication is not exchangable, so $\sqrt{i}\sqrt{j} \neq \sqrt{j}\sqrt{i}$).In fact, in additonal form, they are values of all the permutations among <em>0.5±0.5i±0.5j±0.5k</em>.</p><p>Look at these equations carefully, they are highly symmetric. For i-j-k cycle, <em>minus</em> is even, for k-j-i cycle, <em>minus</em> is odds.Based on these rules, we can do most of algebra deductions to simplify a complex mutiplication expression.We can call this kind of symmetry <em>ternary permutability</em>. And I think ternary permutability can be treated as the core of quaternion.</p><p>And thrice quarter rotation (can also be treated as 180° rotation along a section square diagonal):</p><p>$$\sqrt{i}j = \sqrt[-]{i}k = j\sqrt[-]{i} = k\sqrt[]{i} \\\sqrt[-]{i}j = \sqrt[]{i}k = j\sqrt[]{i} = k\sqrt[-]{i} \\\sqrt{j}k = \sqrt[-]{j}i = k\sqrt[-]{j} = i\sqrt[]{j} \\\sqrt[-]{j}k = \sqrt[]{j}i = k\sqrt[]{j} = i\sqrt[-]{j} \\\sqrt{k}i = \sqrt[-]{k}j = i\sqrt[-]{k} = j\sqrt[]{k} \\\sqrt[-]{k}i = \sqrt[]{k}j = i\sqrt[]{k} = j\sqrt[-]{k}$$</p><p>These 6 lines, plus basic $±\sqrt{i}$, $±\sqrt{j}$, $±\sqrt{k}$, these 12 items are values of all reposition permutations of $(\frac{\sqrt{2}}{2}, ±\frac{\sqrt{2}}{2}, 0, 0)$ multipy by $(1, i, j, k)^{T}$,which $\frac{\sqrt{2}}{2}$ should be prior than $±\frac{\sqrt{2}}{2}$ to satisfy space half-reduction.Because these items’ order number is $\frac{1}{2}$ or $\frac{3}{2}$, we call them <em>odds</em> items, correspondingly, items with order number 0 or 1, called <em>even</em> items.</p><p>Now this is an example to show orthogonal rotation combination simplification, purely by symbol replacement and avoid number calculations.(Also an answer to Euler angles problem mentioned ealier.)</p><p>$$\begin{aligned}\sqrt{i}\sqrt{j}\sqrt{k}\sqrt{i}\sqrt{j}\sqrt{k} &amp;= \sqrt{i}(\sqrt{\textbf{j}}\sqrt{\textbf{k}})\sqrt{i}\sqrt{j}\sqrt{k} \\&amp; = \sqrt{i}(\sqrt{i}\sqrt{j})\sqrt{i}\sqrt{j}\sqrt{k} \\&amp; = \sqrt{i}\sqrt{i}(\sqrt{\textbf{j}}\sqrt{\textbf{i}})\sqrt{j}\sqrt{k} \\&amp; = \sqrt{i}\sqrt{i}(\sqrt{i}\sqrt[-]{k})\sqrt{j}\sqrt{k} \\&amp; = \sqrt{i}\sqrt{i}\sqrt{i}(\sqrt[-]{\textbf{k}}\sqrt{\textbf{j}})\sqrt{k} \\&amp; = \sqrt{i}\sqrt{i}\sqrt{i}(\sqrt{i}\sqrt[-]{k})\sqrt{k} \\&amp; = (\sqrt{i}\sqrt{i}\sqrt{i}\sqrt{i})(\sqrt[-]{k}\sqrt{k}) \\&amp; = i^{2} \cdot 1 \\&amp; = -1 \cong 1\end{aligned}$$</p><h2 id="Elements-and-group">Elements and group</h2><p>Enumerated all possible combinations, we have all 24 individual elements of group. In additional form, they can be listed as:</p><table><thead><tr><th>$\cdot (1, i, j, k)^{T}$</th><th>how many items</th><th></th></tr></thead><tbody><tr><td>1, 0, 0, 0</td><td>4</td><td><em>even</em></td></tr><tr><td>$\frac{\sqrt{2}}{2}$, $±\frac{\sqrt{2}}{2}$, 0, 0</td><td>12</td><td><em>odds</em></td></tr><tr><td>0.5, ±0.5, ±0.5, ±0.5</td><td>8</td><td><em>even</em></td></tr></tbody></table><p>Which 0s’ position in tuples are arbitrary.</p><p>Though addtional form has advantage of unique form for every element, but long for written, and identification confusable.So I prefer to use multiplication form, and which is consistent with Euler angle, therefore geometry instinct and easy to comprehend.To reduce redundancy items in multiplication form, I picks item by alphabetical order, and in the same letter, by order of $\sqrt{i}$, $\sqrt[-]{i}$, $i$.</p><p>Then we get the 24 elements set:</p><p>$$ O_{24}: \{ 1, \sqrt{i}, \sqrt[-]{i}, \sqrt{j}, \sqrt[-]{j}, \sqrt{k}, \sqrt[-]{k}, i, j, k, \sqrt{i}\sqrt{j}, \sqrt{i}\sqrt[-]{j}, \sqrt{i}\sqrt{k}, \sqrt{i}\sqrt[-]{k}, \sqrt[-]{i}\sqrt{j}, \sqrt[-]{i}\sqrt[-]{j}, \sqrt[-]{i}\sqrt{k}, \sqrt[-]{i}\sqrt[-]{k}, \sqrt{i}j, \sqrt[-]{i}j, i\sqrt{j}, i\sqrt[-]{j}, i\sqrt{k}, i\sqrt[-]{k} \} $$</p><p>And categorization by distance from origin:</p><table><thead><tr><th style="text-align:center">elements</th><th>how many quarters rotations</th><th></th></tr></thead><tbody><tr><td style="text-align:center">1</td><td>0</td><td>identity</td></tr><tr><td style="text-align:center">$\sqrt{i}, \sqrt[-]{i}, \sqrt{j}, \sqrt[-]{j}, \sqrt{k}, \sqrt[-]{k}$</td><td>1</td><td>one quarter</td></tr><tr><td style="text-align:center">$i, j, k$</td><td>2</td><td>half</td></tr><tr><td style="text-align:center">$\sqrt{i}\sqrt{j}, \sqrt{i}\sqrt[-]{j}, \sqrt[-]{i}\sqrt{j}, \sqrt[-]{i}\sqrt[-]{j}, \sqrt{i}\sqrt{k}, \sqrt{i}\sqrt[-]{k}, \sqrt[-]{i}\sqrt{k}, \sqrt[-]{i}\sqrt[-]{k}$</td><td>2</td><td>two quaters</td></tr><tr><td style="text-align:center">$\sqrt{i}j, \sqrt[-]{i}j, i\sqrt{j}, i\sqrt[-]{j}, i\sqrt{k}, i\sqrt[-]{k}$</td><td>3</td><td>three quarters</td></tr></tbody></table><p>The visualization:</p><figure class="fixed-ratio" style="width: 100%; padding-top: 67%"><iframe src="/klstudio/embed.html#/documents/mesh-viewer-demo:quarter-categories"></iframe></figure><p>Now only one more thing, define a half-reduction multiplication as operation:</p><p>$$ q \otimes p := abs_{h}(q \cdot p) $$</p><p>$O_{24}$ is closed for this operation, i.e. all results by half-reduction multipy between 2 arbitrary elements in $O_{24}$ are returned in 24 elements.</p><p>$1$ is the identity element, $\{ \sqrt{i}, \sqrt{j}, \sqrt{k} \}$ is the generating set, i.e. all 24 elements can be generated by multiplication among this 3 elements.Every element has a corresponding inverse element.</p><p>Then we get the cube symmetry group (or <a href="https://en.wikipedia.org/wiki/Octahedral_symmetry#Full_octahedral_symmetry" target="_blank" rel="noopener">full octahedral symmetry group</a>):</p><p>$$ O_{h}: \{ O_{24}, 1, \otimes \} $$</p><p>This is the group table:</p><p style="font-size: 9px">$\begin{matrix}\otimes & \textbf{1} & \textbf{i} & \textbf{j} & \textbf{k} & \sqrt{\textbf{i}} & \sqrt{\textbf{j}} & \sqrt{\textbf{k}} & \sqrt[-]{\textbf{i}} & \sqrt[-]{\textbf{j}} & \sqrt[-]{\textbf{k}} & \sqrt{\textbf{i}}\sqrt{\textbf{j}} & \sqrt{\textbf{i}}\sqrt[-]{\textbf{j}} & \sqrt{\textbf{i}}\sqrt{\textbf{k}} & \sqrt{\textbf{i}}\sqrt[-]{\textbf{k}} & \sqrt[-]{\textbf{i}}\sqrt{\textbf{j}} & \sqrt[-]{\textbf{i}}\sqrt[-]{\textbf{j}} & \sqrt[-]{\textbf{i}}\sqrt{\textbf{k}} & \sqrt[-]{\textbf{i}}\sqrt[-]{\textbf{k}} & \sqrt{\textbf{i}}\textbf{j} & \sqrt[-]{\textbf{i}}\textbf{j} & \textbf{i}\sqrt{\textbf{j}} & \textbf{i}\sqrt[-]{\textbf{j}} & \textbf{i}\sqrt{\textbf{k}} & \textbf{i}\sqrt[-]{\textbf{k}} \\\\\textbf{1}  & 1 & i & j & k & \sqrt{i} & \sqrt{j} & \sqrt{k} & \sqrt[-]{i} & \sqrt[-]{j} & \sqrt[-]{k} & \sqrt{i}\sqrt{j} & \sqrt{i}\sqrt[-]{j} & \sqrt{i}\sqrt{k} & \sqrt{i}\sqrt[-]{k} & \sqrt[-]{i}\sqrt{j} & \sqrt[-]{i}\sqrt[-]{j} & \sqrt[-]{i}\sqrt{k} & \sqrt[-]{i}\sqrt[-]{k} & \sqrt{i}j & \sqrt[-]{i}j & i\sqrt{j} & i\sqrt[-]{j} & i\sqrt{k} & i\sqrt[-]{k} \\\\\textbf{i}  & i & 1 & k & j & \sqrt[-]{i} & i\sqrt{j} & i\sqrt{k} & \sqrt{i} & i\sqrt[-]{j} & i\sqrt[-]{k} & \sqrt{i}\sqrt{k} & \sqrt{i}\sqrt[-]{k} & \sqrt{i}\sqrt{j} & \sqrt{i}\sqrt[-]{j} & \sqrt[-]{i}\sqrt{k} & \sqrt[-]{i}\sqrt[-]{k} & \sqrt[-]{i}\sqrt{j} & \sqrt[-]{i}\sqrt[-]{j} & \sqrt[-]{i}j & \sqrt{i}j & \sqrt{j} & \sqrt[-]{j} & \sqrt{k} & \sqrt[-]{k} \\\\\textbf{j}  & j & k & 1 & i & \sqrt[-]{i}j & \sqrt[-]{j} & i\sqrt[-]{k} & \sqrt{i}j & \sqrt{j} & i\sqrt{k} & \sqrt{i}\sqrt[-]{k} & \sqrt{i}\sqrt{k} & \sqrt{i}\sqrt[-]{j} & \sqrt{i}\sqrt{j} & \sqrt[-]{i}\sqrt[-]{j} & \sqrt[-]{i}\sqrt{j} & \sqrt[-]{i}\sqrt[-]{k} & \sqrt[-]{i}\sqrt{k} & \sqrt[-]{i} & \sqrt{i} & i\sqrt[-]{j} & i\sqrt{j} & \sqrt[-]{k} & \sqrt{k} \\\\\textbf{k}  & k & j & i & 1 & \sqrt{i}j & i\sqrt[-]{j} & \sqrt[-]{k} & \sqrt[-]{i}j & i\sqrt{j} & \sqrt{k} & \sqrt{i}\sqrt[-]{j} & \sqrt{i}\sqrt{j} & \sqrt{i}\sqrt[-]{k} & \sqrt{i}\sqrt{k} & \sqrt[-]{i}\sqrt[-]{k} & \sqrt[-]{i}\sqrt{k} & \sqrt[-]{i}\sqrt[-]{j} & \sqrt[-]{i}\sqrt{j} & \sqrt{i} & \sqrt[-]{i} & \sqrt[-]{j} & \sqrt{j} & i\sqrt[-]{k} & i\sqrt{k} \\\\\sqrt{\textbf{i}}  & \sqrt{i} & \sqrt[-]{i} & \sqrt{i}j & \sqrt[-]{i}j & i & \sqrt{i}\sqrt{j} & \sqrt[-]{i}\sqrt{j} & 1 & \sqrt{i}\sqrt[-]{j} & \sqrt[-]{i}\sqrt[-]{j} & i\sqrt{j} & i\sqrt[-]{j} & \sqrt{j} & \sqrt[-]{j} & i\sqrt{k} & i\sqrt[-]{k} & \sqrt{k} & \sqrt[-]{k} & k & j & \sqrt{i}\sqrt{k} & \sqrt{i}\sqrt[-]{k} & \sqrt[-]{i}\sqrt{k} & \sqrt[-]{i}\sqrt[-]{k} \\\\\sqrt{\textbf{j}}  & \sqrt{j} & i\sqrt[-]{j} & \sqrt[-]{j} & i\sqrt{j} & \sqrt[-]{i}\sqrt[-]{j} & j & \sqrt{i}\sqrt{j} & \sqrt[-]{i}\sqrt{k} & 1 & \sqrt{i}\sqrt{k} & i\sqrt[-]{k} & \sqrt[-]{k} & i\sqrt{k} & \sqrt{k} & \sqrt{i} & \sqrt[-]{i}j & \sqrt{i}j & \sqrt[-]{i} & \sqrt[-]{i}\sqrt[-]{k} & \sqrt[-]{i}\sqrt{j} & i & k & \sqrt{i}\sqrt[-]{j} & \sqrt{i}\sqrt[-]{k} \\\\\sqrt{\textbf{k}}  & \sqrt{k} & i\sqrt[-]{k} & i\sqrt{k} & \sqrt[-]{k} & \sqrt{i}\sqrt{j} & \sqrt[-]{i}\sqrt{k} & k & \sqrt{i}\sqrt[-]{k} & \sqrt[-]{i}\sqrt{j} & 1 & \sqrt{i}j & \sqrt{i} & \sqrt[-]{i} & \sqrt[-]{i}j & i\sqrt{j} & \sqrt{j} & i\sqrt[-]{j} & \sqrt[-]{j} & \sqrt{i}\sqrt[-]{j} & \sqrt{i}\sqrt{k} & \sqrt[-]{i}\sqrt[-]{k} & \sqrt[-]{i}\sqrt[-]{j} & i & j \\\\\sqrt[-]{\textbf{i}}  & \sqrt[-]{i} & \sqrt{i} & \sqrt[-]{i}j & \sqrt{i}j & 1 & \sqrt{i}\sqrt{k} & \sqrt[-]{i}\sqrt{k} & i & \sqrt{i}\sqrt[-]{k} & \sqrt[-]{i}\sqrt[-]{k} & \sqrt{j} & \sqrt[-]{j} & i\sqrt{j} & i\sqrt[-]{j} & \sqrt{k} & \sqrt[-]{k} & i\sqrt{k} & i\sqrt[-]{k} & j & k & \sqrt{i}\sqrt{j} & \sqrt{i}\sqrt[-]{j} & \sqrt[-]{i}\sqrt{j} & \sqrt[-]{i}\sqrt[-]{j} \\\\\sqrt[-]{\textbf{j}}  & \sqrt[-]{j} & i\sqrt{j} & \sqrt{j} & i\sqrt[-]{j} & \sqrt[-]{i}\sqrt{j} & 1 & \sqrt{i}\sqrt[-]{k} & \sqrt[-]{i}\sqrt[-]{k} & j & \sqrt{i}\sqrt[-]{j} & \sqrt{k} & i\sqrt{k} & \sqrt[-]{k} & i\sqrt[-]{k} & \sqrt[-]{i}j & \sqrt{i} & \sqrt[-]{i} & \sqrt{i}j & \sqrt[-]{i}\sqrt{k} & \sqrt[-]{i}\sqrt[-]{j} & k & i & \sqrt{i}\sqrt{k} & \sqrt{i}\sqrt{j} \\\\\sqrt[-]{\textbf{k}}  & \sqrt[-]{k} & i\sqrt{k} & i\sqrt[-]{k} & \sqrt{k} & \sqrt{i}\sqrt[-]{j} & \sqrt[-]{i}\sqrt[-]{j} & 1 & \sqrt{i}\sqrt{k} & \sqrt[-]{i}\sqrt[-]{k} & k & \sqrt{i} & \sqrt{i}j & \sqrt[-]{i}j & \sqrt[-]{i} & \sqrt[-]{j} & i\sqrt[-]{j} & \sqrt{j} & i\sqrt{j} & \sqrt{i}\sqrt{j} & \sqrt{i}\sqrt[-]{k} & \sqrt[-]{i}\sqrt{j} & \sqrt[-]{i}\sqrt{k} & j & i \\\\\sqrt{\textbf{i}}\sqrt{\textbf{j}}  & \sqrt{i}\sqrt{j} & \sqrt{i}\sqrt[-]{k} & \sqrt{i}\sqrt[-]{j} & \sqrt{i}\sqrt{k} & i\sqrt[-]{k} & \sqrt{i}j & i\sqrt{j} & \sqrt{k} & \sqrt{i} & \sqrt{j} & \sqrt[-]{i}\sqrt[-]{k} & \sqrt[-]{i}\sqrt[-]{j} & \sqrt[-]{i}\sqrt{k} & \sqrt[-]{i}\sqrt{j} & i & j & k & 1 & \sqrt[-]{k} & i\sqrt{k} & \sqrt[-]{i} & \sqrt[-]{i}j & i\sqrt[-]{j} & \sqrt[-]{j} \\\\\sqrt{\textbf{i}}\sqrt[-]{\textbf{j}}  & \sqrt{i}\sqrt[-]{j} & \sqrt{i}\sqrt{k} & \sqrt{i}\sqrt{j} & \sqrt{i}\sqrt[-]{k} & i\sqrt{k} & \sqrt{i} & \sqrt[-]{j} & \sqrt[-]{k} & \sqrt{i}j & i\sqrt[-]{j} & \sqrt[-]{i}\sqrt{j} & \sqrt[-]{i}\sqrt{k} & \sqrt[-]{i}\sqrt[-]{j} & \sqrt[-]{i}\sqrt[-]{k} & j & i & 1 & k & \sqrt{k} & i\sqrt[-]{k} & \sqrt[-]{i}j & \sqrt[-]{i} & \sqrt{j} & i\sqrt{j} \\\\\sqrt{\textbf{i}}\sqrt{\textbf{k}}  & \sqrt{i}\sqrt{k} & \sqrt{i}\sqrt[-]{j} & \sqrt{i}\sqrt[-]{k} & \sqrt{i}\sqrt{j} & \sqrt[-]{k} & \sqrt[-]{i}j & \sqrt{j} & i\sqrt{k} & \sqrt[-]{i} & i\sqrt{j} & \sqrt[-]{i}\sqrt[-]{j} & \sqrt[-]{i}\sqrt[-]{k} & \sqrt[-]{i}\sqrt{j} & \sqrt[-]{i}\sqrt{k} & 1 & k & j & i & i\sqrt[-]{k} & \sqrt{k} & \sqrt{i} & \sqrt{i}j & \sqrt[-]{j} & i\sqrt[-]{j} \\\\\sqrt{\textbf{i}}\sqrt[-]{\textbf{k}}  & \sqrt{i}\sqrt[-]{k} & \sqrt{i}\sqrt{j} & \sqrt{i}\sqrt{k} & \sqrt{i}\sqrt[-]{j} & \sqrt{k} & \sqrt[-]{i} & i\sqrt[-]{j} & i\sqrt[-]{k} & \sqrt[-]{i}j & \sqrt[-]{j} & \sqrt[-]{i}\sqrt{k} & \sqrt[-]{i}\sqrt{j} & \sqrt[-]{i}\sqrt[-]{k} & \sqrt[-]{i}\sqrt[-]{j} & k & 1 & i & j & i\sqrt{k} & \sqrt[-]{k} & \sqrt{i}j & \sqrt{i} & i\sqrt{j} & \sqrt{j} \\\\\sqrt[-]{\textbf{i}}\sqrt{\textbf{j}}  & \sqrt[-]{i}\sqrt{j} & \sqrt[-]{i}\sqrt[-]{k} & \sqrt[-]{i}\sqrt{k} & \sqrt[-]{i}\sqrt[-]{j} & i\sqrt{j} & \sqrt{k} & \sqrt[-]{i}j & \sqrt[-]{j} & i\sqrt{k} & \sqrt{i} & k & i & 1 & j & \sqrt{i}\sqrt{k} & \sqrt{i}\sqrt{j} & \sqrt{i}\sqrt[-]{k} & \sqrt{i}\sqrt[-]{j} & i\sqrt[-]{j} & \sqrt{j} & \sqrt[-]{k} & i\sqrt[-]{k} & \sqrt[-]{i} & \sqrt{i}j \\\\\sqrt[-]{\textbf{i}}\sqrt[-]{\textbf{j}}  & \sqrt[-]{i}\sqrt[-]{j} & \sqrt[-]{i}\sqrt{k} & \sqrt[-]{i}\sqrt[-]{k} & \sqrt[-]{i}\sqrt{j} & i\sqrt[-]{j} & i\sqrt[-]{k} & \sqrt{i} & \sqrt{j} & \sqrt[-]{k} & \sqrt[-]{i}j & i & k & j & 1 & \sqrt{i}\sqrt[-]{j} & \sqrt{i}\sqrt[-]{k} & \sqrt{i}\sqrt{j} & \sqrt{i}\sqrt{k} & i\sqrt{j} & \sqrt[-]{j} & i\sqrt{k} & \sqrt{k} & \sqrt{i}j & \sqrt[-]{i} \\\\\sqrt[-]{\textbf{i}}\sqrt{\textbf{k}}  & \sqrt[-]{i}\sqrt{k} & \sqrt[-]{i}\sqrt[-]{j} & \sqrt[-]{i}\sqrt{j} & \sqrt[-]{i}\sqrt[-]{k} & \sqrt{j} & i\sqrt{k} & \sqrt{i}j & i\sqrt[-]{j} & \sqrt{k} & \sqrt[-]{i} & j & 1 & i & k & \sqrt{i}\sqrt{j} & \sqrt{i}\sqrt{k} & \sqrt{i}\sqrt[-]{j} & \sqrt{i}\sqrt[-]{k} & \sqrt[-]{j} & i\sqrt{j} & i\sqrt[-]{k} & \sqrt[-]{k} & \sqrt{i} & \sqrt[-]{i}j \\\\\sqrt[-]{\textbf{i}}\sqrt[-]{\textbf{k}}  & \sqrt[-]{i}\sqrt[-]{k} & \sqrt[-]{i}\sqrt{j} & \sqrt[-]{i}\sqrt[-]{j} & \sqrt[-]{i}\sqrt{k} & \sqrt[-]{j} & \sqrt[-]{k} & \sqrt[-]{i} & i\sqrt{j} & i\sqrt[-]{k} & \sqrt{i}j & 1 & j & k & i & \sqrt{i}\sqrt[-]{k} & \sqrt{i}\sqrt[-]{j} & \sqrt{i}\sqrt{k} & \sqrt{i}\sqrt{j} & \sqrt{j} & i\sqrt[-]{j} & \sqrt{k} & i\sqrt{k} & \sqrt[-]{i}j & \sqrt{i} \\\\\sqrt{\textbf{i}}\textbf{j}  & \sqrt{i}j & \sqrt[-]{i}j & \sqrt{i} & \sqrt[-]{i} & j & \sqrt{i}\sqrt[-]{j} & \sqrt[-]{i}\sqrt[-]{k} & k & \sqrt{i}\sqrt{j} & \sqrt[-]{i}\sqrt{k} & \sqrt[-]{j} & \sqrt{j} & i\sqrt[-]{j} & i\sqrt{j} & i\sqrt[-]{k} & i\sqrt{k} & \sqrt[-]{k} & \sqrt{k} & 1 & i & \sqrt{i}\sqrt[-]{k} & \sqrt{i}\sqrt{k} & \sqrt[-]{i}\sqrt[-]{j} & \sqrt[-]{i}\sqrt{j} \\\\\sqrt[-]{\textbf{i}}\textbf{j}  & \sqrt[-]{i}j & \sqrt{i}j & \sqrt[-]{i} & \sqrt{i} & k & \sqrt{i}\sqrt[-]{k} & \sqrt[-]{i}\sqrt[-]{j} & j & \sqrt{i}\sqrt{k} & \sqrt[-]{i}\sqrt{j} & i\sqrt[-]{j} & i\sqrt{j} & \sqrt[-]{j} & \sqrt{j} & \sqrt[-]{k} & \sqrt{k} & i\sqrt[-]{k} & i\sqrt{k} & i & 1 & \sqrt{i}\sqrt[-]{j} & \sqrt{i}\sqrt{j} & \sqrt[-]{i}\sqrt[-]{k} & \sqrt[-]{i}\sqrt{k} \\\\\textbf{i}\sqrt{\textbf{j}}  & i\sqrt{j} & \sqrt[-]{j} & i\sqrt[-]{j} & \sqrt{j} & \sqrt[-]{i}\sqrt[-]{k} & k & \sqrt{i}\sqrt{k} & \sqrt[-]{i}\sqrt{j} & i & \sqrt{i}\sqrt{j} & \sqrt[-]{k} & i\sqrt[-]{k} & \sqrt{k} & i\sqrt{k} & \sqrt[-]{i} & \sqrt{i}j & \sqrt[-]{i}j & \sqrt{i} & \sqrt[-]{i}\sqrt[-]{j} & \sqrt[-]{i}\sqrt{k} & 1 & j & \sqrt{i}\sqrt[-]{k} & \sqrt{i}\sqrt[-]{j} \\\\\textbf{i}\sqrt[-]{\textbf{j}}  & i\sqrt[-]{j} & \sqrt{j} & i\sqrt{j} & \sqrt[-]{j} & \sqrt[-]{i}\sqrt{k} & i & \sqrt{i}\sqrt[-]{j} & \sqrt[-]{i}\sqrt[-]{j} & k & \sqrt{i}\sqrt[-]{k} & i\sqrt{k} & \sqrt{k} & i\sqrt[-]{k} & \sqrt[-]{k} & \sqrt{i}j & \sqrt[-]{i} & \sqrt{i} & \sqrt[-]{i}j & \sqrt[-]{i}\sqrt{j} & \sqrt[-]{i}\sqrt[-]{k} & j & 1 & \sqrt{i}\sqrt{j} & \sqrt{i}\sqrt{k} \\\\\textbf{i}\sqrt{\textbf{k}}  & i\sqrt{k} & \sqrt[-]{k} & \sqrt{k} & i\sqrt[-]{k} & \sqrt{i}\sqrt{k} & \sqrt[-]{i}\sqrt{j} & j & \sqrt{i}\sqrt[-]{j} & \sqrt[-]{i}\sqrt{k} & i & \sqrt[-]{i}j & \sqrt[-]{i} & \sqrt{i} & \sqrt{i}j & \sqrt{j} & i\sqrt{j} & \sqrt[-]{j} & i\sqrt[-]{j} & \sqrt{i}\sqrt[-]{k} & \sqrt{i}\sqrt{j} & \sqrt[-]{i}\sqrt[-]{j} & \sqrt[-]{i}\sqrt[-]{k} & 1 & k \\\\\textbf{i}\sqrt[-]{\textbf{k}}  & i\sqrt[-]{k} & \sqrt{k} & \sqrt[-]{k} & i\sqrt{k} & \sqrt{i}\sqrt[-]{k} & \sqrt[-]{i}\sqrt[-]{k} & i & \sqrt{i}\sqrt{j} & \sqrt[-]{i}\sqrt[-]{j} & j & \sqrt[-]{i} & \sqrt[-]{i}j & \sqrt{i}j & \sqrt{i} & i\sqrt[-]{j} & \sqrt[-]{j} & i\sqrt{j} & \sqrt{j} & \sqrt{i}\sqrt{k} & \sqrt{i}\sqrt[-]{j} & \sqrt[-]{i}\sqrt{k} & \sqrt[-]{i}\sqrt{j} & k & 1\end{matrix}$</p><p>You may notice that top-left 4×4 area in the table is a subgroup by only half rotation elements.</p><p>3D <a href="https://en.wikipedia.org/wiki/Cayley_graph" target="_blank" rel="noopener">Cayley graph</a> for the group:</p><figure><span class="fixed-ratio" style="width: 100%; padding-top: 60%"><iframe src="/klstudio/embed.html#/cube-cayley-graph"></iframe></span><figCaption><p>Cayley graph of $O_{h}$, click top right controls to perform permutations.</p><p>This is an ealier work, sorry for I was using <em>i</em>, <em>i'</em> stand for $\sqrt[&pm;]{i}$ in this article.</p></figCaption></figure><p>I have to confess this graph’s architecture configuration is far from perfection, any good idea about $O_{h}$ visualization please tell me.</p><h2 id="Next-step">Next step</h2><p>Soon later, I will talk about some thinking about Rubik’s Cube representation in computer and some ideas maybe helpful for solver algorithm<sup><a href="https://en.wikipedia.org/wiki/God%27s_algorithm" target="_blank" rel="noopener">2</a></sup>.</p>]]></content>
    
    <summary type="html">
    
      &lt;figure&gt;
	&lt;span class=&quot;max600&quot;&gt;
		&lt;span class=&quot;fixed-ratio&quot; style=&quot;width: 100%; padding-top: 100%&quot;&gt;
			&lt;iframe src=&quot;/klstudio/embed.html#/documents/mesh-viewer-demo:quarter-array-4x6&quot;&gt;&lt;/iframe&gt;
		&lt;/span&gt;
	&lt;/span&gt;
	&lt;figcaption&gt;In 3D space, an object has 6 &amp;times; 4 = 24 orthogonal orientations in total.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;Motivation&quot;&gt;Motivation&lt;/h2&gt;
&lt;p&gt;Canonical Rubik’s Cube solver algorithm&lt;sup&gt;&lt;a href=&quot;https://github.com/hkociemba/RubiksCube-TwophaseSolver&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; constructs cube state from face colors and a lot of permutation rules. That may waste too many coding :)
Face color is merely appearance, cubies’ orientation is essential.
Since Rubik’s Cube seems already been used as the avatar of group theory (check this &lt;a href=&quot;https://en.wikipedia.org/wiki/Group_theory&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wikipedia entry&lt;/a&gt;),
it’s better to clarify all details of the cube rotation group structure, and construct the whole Rubik’s Cube representations based on cubies’ orientation.&lt;/p&gt;
&lt;p&gt;Regardless of Rubik’s Cube, orthogonal rotation in 3D space is usual and connected with interesting problems. E.g. how to quickly tell if 2 orthogonal &lt;a href=&quot;https://en.wikipedia.org/wiki/Euler_angles&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Euler angles&lt;/a&gt; are the same rotation, purely by algebra without experiment?
&lt;a href=&quot;https://en.wikipedia.org/wiki/Quaternion&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Quaternion calculus&lt;/a&gt; may be a short answer, but when you do that, irrational numbers are inevitable, and that seems wasting and precise problematic.&lt;/p&gt;
&lt;p&gt;Programmers prefer easy implementation, which based on a set of simple representation and rules applied to them. No float numbers, no redundancy.
All you need is a multiplication table, and the table is highly symmetric, so let’s begin from analyzing the &lt;strong&gt;R&lt;/strong&gt;&lt;sup&gt;3&lt;/sup&gt; orthogonal rotation group structure.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="math" scheme="https://k-l-lambda.github.io/tags/math/"/>
    
      <category term="algebra" scheme="https://k-l-lambda.github.io/tags/algebra/"/>
    
      <category term="group_theory" scheme="https://k-l-lambda.github.io/tags/group-theory/"/>
    
      <category term="rubiks_cube" scheme="https://k-l-lambda.github.io/tags/rubiks-cube/"/>
    
  </entry>
  
  <entry>
    <title>Embedding Test</title>
    <link href="https://k-l-lambda.github.io/2020/02/03/embed-test/"/>
    <id>https://k-l-lambda.github.io/2020/02/03/embed-test/</id>
    <published>2020-02-03T16:17:45.000Z</published>
    <updated>2022-08-19T08:51:12.991Z</updated>
    
    <content type="html"><![CDATA[<iframe src="/klstudio/embed.html" style="border: 0; width: 100%; height: calc(min(60vh, 60vw))"></iframe><p><em>This is just a page embedding test. Have fun.</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe src=&quot;/klstudio/embed.html&quot; style=&quot;border: 0; width: 100%; height: calc(min(60vh, 60vw))&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;em&gt;This is just a page embedd
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>The First Post</title>
    <link href="https://k-l-lambda.github.io/2020/02/01/first-post/"/>
    <id>https://k-l-lambda.github.io/2020/02/01/first-post/</id>
    <published>2020-02-01T14:25:11.000Z</published>
    <updated>2022-08-19T08:51:12.991Z</updated>
    
    <content type="html"><![CDATA[<p>Blog open, this is the first post.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Blog open, this is the first post.&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
</feed>
